from google import genai
from utils.config import GEMINI_API_KEY

"""
Gemini Language Model Service

This module provides an interface to Google's Gemini API for generating natural language responses.

The `GeminiService` class initializes a Gemini client using an API key and provides a method to interact with the model.

Classes:
    - GeminiService: Wrapper around the Google Gemini API for prompt-based text generation.

Functions:
    - __init__(): Initializes the Gemini API client using the provided API key from config.
    - get_response(prompt, model): Sends a prompt to the Gemini model and returns the generated response text.

Usage:
    service = GeminiService()
    reply = service.get_response("Explain how transformers work.")

Parameters:
    - prompt (str): The input text or query to send to the Gemini model.
    - model (str): Optional. The Gemini model version to use (default: "gemini-2.0-flash").

Returns:
    - str: The cleaned textual response generated by the Gemini model.

Raises:
    - RuntimeError: If any exception occurs during API communication.

Configuration:
    The API key must be provided via `GEMINI_API_KEY` in the config module (`utils.config`).

Note:
    - This implementation assumes basic usage with a single-turn prompt.
    - Extend `get_response` if multi-turn conversational behavior is required.
"""


class GeminiService:
    def __init__(self):
        self.client = genai.Client(api_key=GEMINI_API_KEY)

    def get_response(self, prompt: str, model: str = "gemini-2.0-flash") -> str:
        try:
            response = self.client.models.generate_content(
                model=model,
                contents=prompt
            )
            return response.text.strip()
        except Exception as e:
            raise RuntimeError(f"Gemini API error: {e}")
